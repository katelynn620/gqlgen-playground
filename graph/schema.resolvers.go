package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	"fmt"
	"gqlgen-playground/graph/model"

	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	// panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
	id := uuid.New().String()
	user := &model.User{
		ID:   input.UserID,
		Name: fmt.Sprintf("user-%s", input.UserID),
	}
	todo := &model.Todo{
		ID:   id,
		Text: input.Text,
		Done: false,
		User: user,
	}
	r.TodoList = append(r.TodoList, todo)
	return todo, nil
}

// ToggleTodoDone is the resolver for the toggleTodoDone field.
func (r *mutationResolver) ToggleTodoDone(ctx context.Context, id string) (*model.Todo, error) {
	for _, todo := range r.TodoList {
		if todo.ID == id {
			todo.Done = !todo.Done
			return todo, nil
		}
	}
	return nil, nil
}

// RemoveTodo is the resolver for the removeTodo field.
func (r *mutationResolver) RemoveTodo(ctx context.Context, id string) (*model.Todo, error) {
	for i, todo := range r.TodoList {
		if todo.ID == id {
			r.TodoList = append(r.TodoList[:i], r.TodoList[i+1:]...)
			return todo, nil
		}
	}
	return nil, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	// panic(fmt.Errorf("not implemented: Todos - todos"))
	return r.TodoList, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
